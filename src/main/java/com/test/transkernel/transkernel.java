package com.test.transkernel;

import android.content.Context;
import android.util.Log;

import com.nationz.nk_bluetooth.R;
import com.nationz.payinterface.OnClickInterface;
import com.nationz.util.DialogUtil;
import com.nationz.util.ToastUtil;

public class transkernel {

    int count = 0;
    private static transkernel kernel;
    private Context context;

    private transkernel(Context context) {
        this.context = context;
    }

    public static transkernel getInstance(Context context) {
        if (kernel == null) {
            kernel = new transkernel(context);
        }
        return kernel;
    }

    public void clear(){
        kernel = null;
    }
    public int dataTransmit(int channel, byte[] input, byte[] ouput) {
        int len = 0;
        count++;
        Log.i("Test","count: "+count);
        switch (count) {
            case 1:
                byte[] res1 = new byte[]{0x6F, 0x26, (byte) 0x84, 0x0E, 0x31, 0x50, 0x41, 0x59, 0x2E, 0x53, 0x59, 0x53, 0x2E, 0x44, 0x44, 0x46, 0x30, 0x31, (byte) 0xA5, 0x14, (byte) 0x88, 0x01,
                        0x01, 0x5F, 0x2D, 0x02, 0x7A, 0x68, (byte) 0x9F, 0x11, 0x01, 0x01, (byte) 0xBF, 0x0C, 0x05, (byte) 0x9F, 0x4D, 0x02, 0x0B, 0x0A, (byte) 0x90, 0x00};
                System.arraycopy(res1, 0, ouput, 0, res1.length);
                len = res1.length;
                break;
            case 2:
                byte[] res2 = new byte[]{0x70, 0x1B, 0x61, 0x19, 0x4F, 0x08, (byte) 0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01, 0x01, 0x50, 0x0A, 0x50, 0x42, 0x4F, 0x43, 0x20, 0x44, 0x45, 0x42,
                        0x49, 0x54, (byte) 0x87, 0x01, 0x01, (byte) 0x90, 0x00};
                System.arraycopy(res2, 0, ouput, 0, res2.length);
                len = res2.length;
                break;
            case 3:
                byte[] res3 = new byte[]{0x6A, (byte) 0x83};
                System.arraycopy(res3, 0, ouput, 0, res3.length);
                len = res3.length;
                break;
            case 4:
                byte[] res4 = new byte[]{0x6F, 0x4A, (byte) 0x84, 0x08, (byte) 0xA0, 0x00, 0x00, 0x03, 0x33, 0x01, 0x01, 0x01, (byte) 0xA5, 0x3E, 0x50, 0x0A, 0x50, 0x42, 0x4F, 0x43, 0x20, 0x44,
                        0x45, 0x42, 0x49, 0x54, (byte) 0x87, 0x01, 0x01, (byte) 0x9F, 0x38, 0x09, (byte) 0x9F, 0x7A, 0x01, (byte) 0x9F, 0x02, 0x06, 0x5F, 0x2A, 0x02, 0x5F, 0x2D,
                        0x02, 0x7A, 0x68, (byte) 0x9F, 0x11, 0x01, 0x01, (byte) 0x9F, 0x12, 0x0A, 0x50, 0x42, 0x4F, 0x43, 0x20, 0x44, 0x45, 0x42, 0x49, 0x54, (byte) 0xBF, 0x0C,
                        0x0A, (byte) 0x9F, 0x4D, 0x02, 0x0B, 0x0A, (byte) 0xDF, 0x4D, 0x02, 0x0C, 0x0A, (byte) 0x90, 0x00};
                System.arraycopy(res4, 0, ouput, 0, res4.length);
                len = res4.length;
                break;
            case 5:
                byte[] res5 = new byte[]{(byte) 0x80, 0x12, 0x7C, 0x00, 0x08, 0x01, 0x02, 0x00, 0x10, 0x01, 0x04, 0x01, 0x18, 0x01, 0x03, 0x00, 0x20, 0x01, 0x01, 0x00, (byte) 0x90, 0x00};
                System.arraycopy(res5, 0, ouput, 0, res5.length);
                len = res5.length;
                break;
            case 6:
                byte[] res6 = new byte[]{0x70, 0x08, 0x5F, 0x20, 0x05, 0x61, 0x62, 0x63, 0x64, 0x65, (byte) 0x90, 0x00};
                System.arraycopy(res6, 0, ouput, 0, res6.length);
                len = res6.length;
                break;
            case 7:
                byte[] res7 = new byte[]{0x70, 0x15, 0x57, 0x13, 0x62, 0x17, (byte) 0x99, 0x58, 0x40, 0x03, 0x55, 0x46, (byte) 0x94, 0x4D, 0x25, 0x11, 0x22, 0x04, 0x51, 0x06, 0x00, 0x00, 0x0F,
                        (byte) 0x90, 0x00};
                System.arraycopy(res7, 0, ouput, 0, res7.length);
                len = res7.length;
                break;
            case 8:
                byte[] res8 = new byte[]{0x70, 0x4D, 0x5A, 0x0A, 0x62, 0x17, (byte) 0x99, 0x58, 0x40, 0x03, 0x55, 0x46, (byte) 0x94, 0x4F, (byte) 0x8E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        0x00, 0x00, 0x02, 0x03, 0x1F, 0x00, (byte) 0x9F, 0x0D, 0x05, (byte) 0xD8, 0x60, 0x04, (byte) 0xA8, 0x00, (byte) 0x9F, 0x0E, 0x05, 0x00, 0x10, (byte) 0x98,
                        0x00, 0x00, (byte) 0x9F, 0x0F, 0x05, (byte) 0xD8, 0x68, 0x04, (byte) 0xF8, 0x00, 0x5F, 0x24, 0x03, 0x25, 0x11, 0x30, 0x5F, 0x28, 0x02, 0x01, 0x56, (byte) 0x9F,
                        0x07, 0x02, (byte) 0xFF, 0x00, 0x5F, 0x25, 0x03, 0x15, 0x11, 0x13, (byte) 0x9F, 0x08, 0x02, 0x00, 0x30, (byte) 0x90, 0x00};
                System.arraycopy(res8, 0, ouput, 0, res8.length);
                len = res8.length;
                break;
            case 9:
                byte[] res9 = new byte[]{0x70, (byte) 0x81, (byte) 0xB4, (byte) 0x9F, 0x46, (byte) 0x81, (byte) 0xB0, 0x67, (byte) 0xA7, (byte) 0xB8, (byte) 0xDB, (byte) 0xEB, (byte) 0xF3, 0x7C, (byte) 0xB9, (byte) 0xC1, 0x6B, (byte) 0xBE, (byte) 0x91, (byte) 0x9E, 0x7D, 0x7A, 0x6B, 0x12, (byte) 0xFA,
                        0x70, 0x2A, 0x33, 0x0B, 0x14, 0x5E, 0x1E, (byte) 0xCE, 0x46, 0x50, (byte) 0xFD, (byte) 0xB4, (byte) 0xE2, 0x58, (byte) 0x95, 0x3C, 0x4C, 0x25, (byte) 0xD3, (byte) 0x8B, 0x6E, 0x6A, 0x13, 0x6C, (byte) 0xD3,
                        (byte) 0x9F, 0x00, (byte) 0xB6, (byte) 0xAE, (byte) 0xDC, 0x06, 0x51, (byte) 0x8E, (byte) 0xB1, (byte) 0xDA, (byte) 0x8F, 0x77, 0x02, 0x28, 0x17, 0x52, 0x42, 0x09, 0x0D, (byte) 0xE5, 0x41, 0x0E, 0x25, (byte) 0xA9, (byte) 0xBF,
                        0x7B, (byte) 0xA0, (byte) 0xA3, 0x02, (byte) 0xE6, 0x74, 0x4F, 0x03, 0x3C, 0x10, (byte) 0xDC, (byte) 0xC9, (byte) 0x8F, (byte) 0xB6, (byte) 0xC8, 0x4D, (byte) 0x9A, 0x6A, (byte) 0xE8, (byte) 0xA1, (byte) 0xA8, (byte) 0x9F, 0x5C, (byte) 0xE7, (byte) 0xD1,
                        0x3E, (byte) 0xB4, (byte) 0xD5, 0x10, (byte) 0xBF, 0x31, (byte) 0xE5, (byte) 0xE6, 0x15, (byte) 0xB4, 0x65, 0x58, 0x49, (byte) 0xA2, (byte) 0xD4, (byte) 0xE4, (byte) 0xB6, (byte) 0x8C, (byte) 0xDC, (byte) 0x89, 0x2E, (byte) 0xB2, 0x71, (byte) 0xFB, (byte) 0xE2,
                        (byte) 0xA6, 0x3F, (byte) 0x8A, (byte) 0xB2, (byte) 0xEF, (byte) 0xB0, 0x49, 0x7A, (byte) 0xA5, 0x59, 0x67, 0x7D, 0x54, 0x7E, 0x30, (byte) 0x99, (byte) 0xDE, 0x24, (byte) 0xD2, 0x75, 0x4E, 0x18, 0x2C, (byte) 0xB4, (byte) 0x84,
                        (byte) 0xCD, (byte) 0x8F, (byte) 0x89, (byte) 0xD1, 0x53, 0x3D, (byte) 0xA4, (byte) 0x9F, (byte) 0xD6, (byte) 0xD8, 0x2A, (byte) 0xE5, (byte) 0xED, 0x63, 0x1C, 0x47, (byte) 0x9A, (byte) 0xC4, 0x05, (byte) 0xCA, (byte) 0xD9, 0x73, 0x27, 0x08, 0x7E,
                        0x0B, 0x65, 0x50, 0x5C, 0x5A, 0x16, 0x14, 0x6D, (byte) 0x90, 0x00};
                System.arraycopy(res9, 0, ouput, 0, res9.length);
                len = res9.length;
                break;
            case 10:
                byte[] res10 = new byte[]{0x70, 0x04, (byte) 0x9F, 0x47, 0x01, 0x03, (byte) 0x90, 0x00};
                System.arraycopy(res10, 0, ouput, 0, res10.length);
                len = res10.length;
                break;
            case 11:
                byte[] res11 = new byte[]{0x70, (byte) 0x81, (byte) 0xCA, (byte) 0x93, (byte) 0x81, (byte) 0xB0, 0x23, 0x44, (byte) 0xC8, (byte) 0x87, (byte) 0xD8, (byte) 0xF5, 0x2F, 0x45, 0x56, (byte) 0xBC,
                        (byte) 0x9C, (byte) 0xB2, 0x1E, (byte) 0xC3, 0x00, (byte) 0xB5, 0x13, 0x41, (byte) 0x90, (byte) 0xB9, (byte) 0xDF, 0x06, 0x35, 0x37, (byte) 0x91, (byte) 0x89, 0x50,
                        (byte) 0xEC, 0x50, (byte) 0xCB, 0x13, 0x7D, (byte) 0xC6, (byte) 0xDB, (byte) 0xA2, (byte) 0xEF, 0x4C, (byte) 0x90, 0x2B, (byte) 0xC8, (byte) 0xF1, 0x35, (byte) 0x8B,
                        0x25, 0x5D, 0x41, 0x7A, 0x31, (byte) 0xA0, (byte) 0x88, 0x7A, 0x76, (byte) 0xAC, 0x2D, 0x7E, (byte) 0x8A, 0x36, (byte) 0xC5, (byte) 0xC4, 0x4E, (byte) 0xA5, (byte) 0x9C,
                        (byte) 0x8D, (byte) 0xD6, 0x76, (byte) 0xD0, 0x4D, (byte) 0xAF, (byte) 0x85, (byte) 0xA0, 0x58, 0x70, (byte) 0xBC, (byte) 0xD4, 0x5D, 0x0E, (byte) 0x99, (byte) 0xCE, 0x29,
                        0x58, 0x6C, (byte) 0xC5, 0x05, (byte) 0xEE, 0x24, (byte) 0xA2, (byte) 0xEE, 0x44, 0x00, (byte) 0xD6, (byte) 0xDE, 0x6A, 0x08, (byte) 0xF6, (byte) 0xEC, (byte) 0xE8,
                        (byte) 0x82, 0x0A, (byte) 0xA0, 0x54, (byte) 0x80, 0x34, (byte) 0xB0, (byte) 0x90, (byte) 0xF9, 0x4E, 0x13, 0x73, 0x79, 0x41, 0x02, (byte) 0xF4, 0x78, (byte) 0xB8,
                        (byte) 0xB9, 0x1B, 0x28, 0x53, (byte) 0xA1, (byte) 0x8B, (byte) 0xE6, (byte) 0xBD, 0x5E, (byte) 0xC1, (byte) 0xD6, 0x0C, (byte) 0x86, 0x2D, 0x24, 0x2F, (byte) 0xE8,
                        0x6F, 0x31, 0x76, 0x58, 0x59, (byte) 0xC1, (byte) 0xC9, 0x1E, 0x74, 0x55, (byte) 0x8D, 0x12, 0x37, 0x2E, 0x32, 0x7C, (byte) 0x91, (byte) 0x8D, (byte) 0x8F, 0x33,
                        (byte) 0x9C, (byte) 0x8C, 0x0E, (byte) 0xD5, 0x25, 0x2F, 0x64, (byte) 0xA2, (byte) 0xEA, (byte) 0x80, (byte) 0xB1, (byte) 0x9B, 0x02, 0x1C, 0x62, (byte) 0xB3,
                        (byte) 0xCE, (byte) 0xD1, 0x34, (byte) 0xAD, (byte) 0xE0, 0x68, (byte) 0xA3, (byte) 0x8F, (byte) 0xA1, (byte) 0x9F, 0x4A, 0x01, (byte) 0x82, (byte) 0x9F, 0x63,
                        0x10, 0x30, 0x31, 0x30, 0x30, 0x39, 0x39, 0x39, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x90, 0x00};
                System.arraycopy(res11, 0, ouput, 0, res11.length);
                len = res11.length;
                break;
            case 12:
                byte[] res12 = new byte[]{0x70, (byte) 0x81, (byte) 0xFB, (byte) 0x90, (byte) 0x81, (byte) 0xF8, (byte) 0xBA, 0x74, (byte) 0xFA, 0x1D, 0x1D, 0x3E, (byte) 0xDF, (byte) 0xFE, (byte) 0xCB, 0x39,
                        (byte) 0x82, 0x3F, (byte) 0xAE, 0x55, (byte) 0xDD, 0x1E, (byte) 0xDC, 0x04, 0x7F, 0x05, (byte) 0xC8, (byte) 0xBA, (byte) 0x80, (byte) 0xD7, (byte) 0x80, 0x4F, 0x5F,
                        (byte) 0x88, 0x32, 0x18, 0x5B, 0x3E, 0x75, (byte) 0x9F, (byte) 0xDB, (byte) 0xA4, 0x06, (byte) 0x85, 0x7B, 0x52, 0x21, (byte) 0xBE, 0x52, 0x64, 0x7C, (byte) 0x93,
                        (byte) 0xCD, 0x77, 0x54, 0x07, 0x75, 0x56, 0x31, (byte) 0xC8, (byte) 0xFF, 0x79, 0x16, (byte) 0xBA, 0x1A, (byte) 0xF0, (byte) 0xC0, (byte) 0x89, 0x74, (byte) 0xB6,
                        (byte) 0xD8, (byte) 0xC8, 0x5D, 0x09, 0x4C, (byte) 0x80, 0x36, (byte) 0xCB, (byte) 0xBC, (byte) 0xE6, 0x20, (byte) 0x8C, (byte) 0x83, 0x1D, 0x71, 0x73, (byte) 0xE4,
                        0x5B, 0x3C, 0x21, 0x79, 0x0B, (byte) 0xCA, 0x12, (byte) 0xE1, 0x07, 0x38, (byte) 0x8F, (byte) 0xE9, (byte) 0x9F, 0x72, 0x35, (byte) 0xC9, (byte) 0xA6, (byte) 0xCA,
                        0x65, (byte) 0xDA, (byte) 0x8E, 0x28, 0x38, (byte) 0x80, (byte) 0xDF, 0x19, (byte) 0x84, (byte) 0x80, (byte) 0x8B, 0x6B, 0x1E, 0x18, 0x37, 0x4D, (byte) 0xA8, 0x29,
                        (byte) 0xFE, (byte) 0xCC, (byte) 0xBB, 0x6F, (byte) 0xC3, 0x75, (byte) 0xAF, 0x44, (byte) 0xA9, 0x75, (byte) 0x87, 0x1B, (byte) 0x90, (byte) 0xBF, (byte) 0x94, 0x4D,
                        (byte) 0xCF, 0x3C, (byte) 0xA8, 0x38, (byte) 0xAA, 0x2C, 0x77, (byte) 0xF1, (byte) 0xF0, 0x76, 0x22, 0x6B, 0x4A, (byte) 0x89, 0x78, (byte) 0xE7, 0x28, 0x70, (byte) 0xD4,
                        (byte) 0x8E, 0x38, 0x17, (byte) 0xA4, 0x71, (byte) 0xBC, 0x7E, (byte) 0x9C, 0x01, 0x12, (byte) 0xA5, (byte) 0xE2, 0x44, 0x52, (byte) 0xD9, (byte) 0xD0, 0x61, (byte) 0x9F,
                        (byte) 0xA3, (byte) 0xE8, 0x6A, (byte) 0x8F, 0x7F, (byte) 0xAD, 0x48, 0x1F, 0x09, 0x71, 0x1A, (byte) 0xF5, 0x51, 0x31, 0x43, (byte) 0x8E, 0x5D, (byte) 0xC8, (byte) 0xF9,
                        (byte) 0x84, (byte) 0xE8, 0x39, 0x11, 0x36, (byte) 0x85, (byte) 0xE5, 0x33, 0x27, 0x13, 0x7F, (byte) 0xA5, 0x6F, (byte) 0xFD, (byte) 0xF9, (byte) 0xCB, 0x4D, 0x7F,
                        (byte) 0x95, (byte) 0xAE, 0x5C, 0x1F, 0x47, 0x60, (byte) 0xB8, (byte) 0xEE, (byte) 0xB9, (byte) 0xE3, 0x7A, 0x29, 0x6F, 0x3C, 0x6B, (byte) 0xE1, (byte) 0x91, (byte) 0xA5,
                        (byte) 0xCC, 0x59, (byte) 0xC5, 0x22, (byte) 0xA0, 0x2D, (byte) 0x81, (byte) 0x8F, (byte) 0x89, (byte) 0x85, 0x19, (byte) 0xC4, (byte) 0xA1, (byte) 0xC6, 0x33, (byte) 0x8A,
                        (byte) 0xDF, (byte) 0xAA, 0x2B, 0x38, 0x7D, (byte) 0xA2, 0x65, (byte) 0x90, 0x00};

                System.arraycopy(res12, 0, ouput, 0, res12.length);
                len = res12.length;
                break;
            case 13:
                byte[] res13 = new byte[]{0x70, 0x09, (byte) 0x9F, 0x32, 0x01, 0x03, (byte) 0x92, 0x00, (byte) 0x8F, 0x01, 0x04, (byte) 0x90, 0x00};
                System.arraycopy(res13, 0, ouput, 0, res13.length);
                len = res13.length;
                break;
            case 14:
                byte[] res14 = new byte[]{0x70, 0x6D, 0x5F, 0x34, 0x01, 0x01, (byte) 0x9F, 0x49, 0x03, (byte) 0x9F, 0x37, 0x04, (byte) 0x8C, 0x1B, (byte) 0x9F, 0x02, 0x06, (byte) 0x9F, 0x03, 0x06, (byte) 0x9F,
                        0x1A, 0x02, (byte) 0x95, 0x05, 0x5F, 0x2A, 0x02, (byte) 0x9A, 0x03, (byte) 0x9C, 0x01, (byte) 0x9F, 0x37, 0x04, (byte) 0x9F, 0x21, 0x03, (byte) 0x9F, 0x4E, 0x14,
                        (byte) 0x8D, 0x1A, (byte) 0x8A, 0x02, (byte) 0x9F, 0x02, 0x06, (byte) 0x9F, 0x03, 0x06, (byte) 0x9F, 0x1A, 0x02, (byte) 0x95, 0x05, 0x5F, 0x2A, 0x02, (byte) 0x9A, 0x03,
                        (byte) 0x9C, 0x01, (byte) 0x9F, 0x37, 0x04, (byte) 0x9F, 0x21, 0x03, (byte) 0x97, 0x1A, (byte) 0x8A, 0x02, (byte) 0x9F, 0x02, 0x06, (byte) 0x9F, 0x03, 0x06, (byte) 0x9F,
                        0x1A, 0x02, (byte) 0x95, 0x05, 0x5F, 0x2A, 0x02, (byte) 0x9A, 0x03, (byte) 0x9C, 0x01, (byte) 0x9F, 0x37, 0x04, (byte) 0x9F, 0x21, 0x03, (byte) 0x9F, 0x44, 0x01, 0x02,
                        (byte) 0x9F, 0x42, 0x02, 0x01, 0x56, 0x5F, 0x30, 0x02, 0x02, 0x20, (byte) 0x90, 0x00};
                System.arraycopy(res14, 0, ouput, 0, res14.length);
                len = res14.length;
                break;
            case 15:
                byte[] res15 = new byte[]{0x70, 0x08, (byte) 0x9F, 0x14, 0x01, 0x00, (byte) 0x9F, 0x23, 0x01, 0x00, (byte) 0x90, 0x00};
                System.arraycopy(res15, 0, ouput, 0, res15.length);
                len = res15.length;
                break;
            case 16:
                byte[] res16 = new byte[]{(byte) 0x9F, 0x36, 0x02, 0x00, 0x4B, (byte) 0x90, 0x00};
                System.arraycopy(res16, 0, ouput, 0, res16.length);
                len = res16.length;
                break;
            case 17:
                byte[] res17 = new byte[]{(byte) 9F, 0x13, 0x02, 0x00, 0x45, (byte) 0x90, 0x00};
                System.arraycopy(res17, 0, ouput, 0, res17.length);
                len = res17.length;
                break;
            case 18:
                byte[] res18 = new byte[]{(byte) 0x80, 0x1E, 0x00, 0x00, 0x4B, 0x63, 0x4E, 0x2C, 0x0A, (byte) 0x92, (byte) 0xCB, 0x4C, 0x22, 0x07, 0x02, 0x01, 0x03, (byte) 0x80, (byte) 0xA0, 0x00, 0x01, 0x0A, 0x01, 0x00, 0x00,
                        0x00, 0x00, 0x00, (byte) 0xB9, (byte) 0xF6, (byte) 0x97, (byte) 0xFB, (byte) 0x90, 0x00};
                System.arraycopy(res18, 0, ouput, 0, res18.length);
                len = res18.length;
                break;
        }

        return len;
    }

    public int EnterPin() {
        Log.i("Test", "enter pin...");
        showPwdDialog();
        return 0;
    }

    private void showPwdDialog() {
        DialogUtil dialogUtil = new DialogUtil();
        dialogUtil.pwdDialog(context, "100", new OnClickInterface() {
            @Override
            public void onClickListener() {
                Log.i("Test", context.getString(R.string.submit));
            }

            @Override
            public void onDismissListener() {
                Log.i("Test", context.getString(R.string.cancel_trade));
                ToastUtil.showToast(context, context.getString(R.string.cancel_trade));
            }
        });
    }

    public int ShowCardHoldID() {
        return 0;
    }

    public int DetectInputCardEvent() {
        int ret = 0;

        return ret;
    }

    public int GetunpreditableNum(byte[] value, int len) {
        for (int i = 0; i < len; i++) {
            value[i] = (byte) i;
        }

        return 0;
    }

    public int GetRandNumBetween(int start, int end) {
        return end - start;
    }

    public native void TransInitEnv();

    public native int TransInitTransaction(int voucherNo, String datatime, int channel);

    public native int TransStartTransaction(int bsupportEC, int index, String amount, String tip);

    public native int TransProcessTransaction();
}

